1.递归
class Solution {

    private List<Integer> res = new ArrayList<>();;
    public List<Integer> preorder(Node root) {
        dfs(root);
        return res;
    }
    private void dfs(Node root) {
        if(root == null)    return;
        res.add(root.val);
        for(var child : root.children)
            dfs(child);
    }


}

2.迭代

class Solution {
   List<Integer> res = new ArrayList<>();
    Deque<Node>  stack = new LinkedList<>();
    public List<Integer> preorder(Node root) {
        if(root == null)    return res;
        stack.push(root);
        while(!stack.isEmpty())
        {
            Node cur = stack.pop();
            res.add(cur.val);
            for(int i = cur.children.size()-1; i >= 0; i--)
                stack.push(cur.children.get(i));
        }
        return res;
    }

}
