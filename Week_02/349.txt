给定一个非空的整数数组，返回其中出现频率前 k 高的元素。



示例 1:

输入: nums = [1,1,1,2,2,3], k = 2
输出: [1,2]
示例 2:

输入: nums = [1], k = 1
输出: [1]


提示：

你可以假设给定的 k 总是合理的，且 1 ≤ k ≤ 数组中不相同的元素的个数。
你的算法的时间复杂度必须优于 O(n log n) , n 是数组的大小。
题目数据保证答案唯一，换句话说，数组中前 k 个高频元素的集合是唯一的。
你可以按任意顺序返回答案。


解题思路
本题的最优解法是利用桶排序

首先创建一个 Map 记录数组中每个元素的频率

然后创建一个数组将元素按照频率升序存放在 list 中

定义 i 来接收每个元素的频率，并且元素就按照自己的频率作为数组的下标存储

最后对数组逆向求出前 k个高频率的元素，放入结果集 res 即可。


1.桶排序
class Solution {
     public int[] topKFrequent(int[] nums, int k) {
        int[] res = new int[k];
        if (nums == null) {
            return new int[]{0};
        }
        Map<Integer,Integer> map = new HashMap<>();
        for (int n : nums) {
            map.put(n, map.getOrDefault(n, 0) + 1);
        }
        List<Integer>[] tmp = new List[nums.length + 1];
        for (int key : map.keySet()) {
            int i = map.get(key);
            if (tmp[i] == null) {
                tmp[i] = new ArrayList();
            }
            tmp[i].add(key);
        }
        int index = 0;
        for (int i = tmp.length - 1; i >= 0 && index<k; i--) {
            if (tmp[i] == null) {
                continue;
            }
            for(int j =0;j<tmp[i].size() && index<k;j++){
                res[index++] =  tmp[i].get(j);
            }

        }

        return res;
    }

}

2.用最小堆
class Solution {
     public int[] topKFrequent(int[] nums, int k) {
        int[] res = new int[k];
        if (nums == null || nums.length ==0) {
            return new int[]{0};
        }
        Map<Integer,Integer> map = new HashMap<>();
        for(int num : nums){
            map.put(num,map.getOrDefault(num,0)+1 );
        }
        Queue<Integer> queue = new PriorityQueue<Integer>( (a,b) -> (map.get(a) - map.get(b)) );
        for(Integer key : map.keySet()){
            queue.add(key);
            if(queue.size()>k){
                queue.poll();
            }
        }

        for(int i=k-1;i>=0 ;i--){
            res[i] = queue.poll();
        }

        return res;
    }

}
本题需要找出前k高频的元素，我们可以通过遍历一遍数组，来统计出各个元素出现的频率。这里使用HashMap来存储。

接下来需要找到找出前k高频的元素，正常的思路按照频率进行排序，之后将前k个找出来。由于时间的复杂度必须优于O(nlog n)，

那这里使用***，归并，堆排等等。都是符合要求的。相比其他两种排序来说，由于只需要取出前K个高频元素，我们使用堆排的思想，维护一个小顶堆，小顶堆的大小最大为k，遍历哈希表，将元素放入堆中，最后的结果就是我们想要的。时间复杂度为O(nlog k)。

