1.把三个数组简化成一个数组如下：
1.第一个丑数是1，分别被p2,p3,p5三个指针指向。三个指针分别代表该丑数等待被 * 2 * 3 * 5,或者说是该丑数是否通过* 2 * 3 * 5产生过新丑数的标识（正是因为只是标识，没必要想象三个指针三个数组七里八里的，一个数组就能理解了，每个数三个指针三个标识，用完即用来白标识别的数，就这三个标识一直复用。）
（再多说点，这种理解其实用面向对象的思想比较好理解，用指针作为标识还是很别扭的，把每个丑数看成对象，指针看成flag成员变量，保证最多三个对象flag=true）。
2.当一个丑数已经被* 2 * 3 * 5后，对于生成丑数已经没有用了，我们把对应指针前移一位（即复用标识），让下一个丑数等待被*来生成新丑数。
3.每次计算出来个三个丑数的最小的一个作为新丑数加入，然后判断是通过 * 多少得到的来后移对应指针。（这里记得去重）
通过123我们可以发现，我们每次生成的都是最小的丑数（保证是升序），并且每个丑数都尝试过被 *2 *3 *5（保证无遗漏）。

对应代码就是高赞评论的代码，我就不cv了。

第一次写题解，欢迎大家指正。

作者：zzz-ai
链接：https://leetcode-cn.com/problems/chou-shu-lcof/solution/ling-pi-xi-jing-yi-ge-shu-lie-li-jie-san-zhi-zhen-/


class Solution {
    public int nthUglyNumber(int n) {
        int a=0,b=0,c=0;
        int[] nums = new int[n];
        nums[0] = 1;
        for(int i=1;i<n;i++){
            int numa = 2*nums[a];
            int numb = 3*nums[b];
            int numc = 5*nums[c];
            nums[i] = Math.min(Math.min(numa,numb),numc);
            if(nums[i] == numa) a++;
            if(nums[i] == numb) b++;
            if(nums[i] == numc) c++;
        }
        return nums[n-1];
    }
}

时间复杂度为n

2.最小根 复杂度太高，为n* logn
 而且数组中的数如果设置为int还要超出int的存储范围，得用long，返回结果的时候再转为int，可以作为一种思路，但是作为题解太费时间

class Solution {
    private long[] urglyNumbers = new long[]{2,3,5};
    public int nthUglyNumber(int n) {
        Queue<Long> queue = new PriorityQueue<>();
        int[] res = new int[n];
        queue.add(1l);
        res[0] = 1;
        int count = 0;
        for(int i=0;i<n;i++){
            long num = 0;
            if(!queue.isEmpty()){
                num = queue.poll();
            }
            res[count++] = (int)num;
            for(long l : urglyNumbers){
                if(!queue.contains(l*num)){
                    queue.add(l*num);
                }
            }
        }
        return res[n-1];
    }
}
