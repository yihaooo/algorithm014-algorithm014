dp:
public int maximalSquare(char[][] matrix) {
    if (matrix == null || matrix.length < 1 || matrix[0].length < 1) return 0;

    int height = matrix.length;
    int width = matrix[0].length;
    int maxSide = 0;

    int[][] dp = new int[height + 1][width + 1];

    for (int row = 0; row < height; row++) {
        for (int col = 0; col < width; col++) {
            if (matrix[row][col] == '1') {
                dp[row + 1][col + 1] = Math.min(Math.min(dp[row + 1][col], dp[row][col + 1]), dp[row][col]) + 1;
                maxSide = Math.max(maxSide, dp[row + 1][col + 1]);
            }
        }
    }
    return maxSide * maxSide;
}

dp空间优化：
public int maximalSquare(char[][] matrix) {
    if (matrix == null || matrix.length < 1 || matrix[0].length < 1) return 0;

    int height = matrix.length;
    int width = matrix[0].length;
    int maxSide = 0;


    int[] dp = new int[width + 1];
    int northwest = 0;

    for (char[] chars : matrix) {
        northwest = 0; // 遍历每行时，还原回辅助的原值0
        for (int col = 0;
        for (int col = 0; col < width; col++) {
            int nextNorthwest = dp[col + 1];
            if (chars[col] == '1') {
               dp[col + 1] = Math.min(Math.min(dp[col], dp[col + 1]), northwest) + 1;


                maxSide = Math.max(maxSide, dp[col + 1]);
            } else {
                dp[col + 1] = 0;
            }
            northwest = nextNorthwest;
        }
    }
    return maxSide * maxSide;
}